# Database concept
* Introduction
* What is a database
* topology
* Relational database
* SQL language
* NoSQL database (a wink)
* Introduction - Reference

## Introduction
MySQL is a SQL relational database server developed for the sake of high read performance, which means that it is more oriented towards the data service already in place than to that of frequent and highly secure updates. It is multi-threaded and multi-user.


It is a free software, open source, developed under dual license depending on whether it is distributed with a free product or with a proprietary product. In the latter case, the license is paid, otherwise it is the GNU General Public License (GPL) that applies. Software that integrates MySQL code or integrates MySQL during its installation must be free or acquire a paid license. However, if the database is separate from proprietary software that only uses third-party APIs (for example in C # or php), then there is no need to acquire a paid MySQL license. This type of dual license is used by other products such as the Qt software development framework (for versions prior to 4.5).


MySQL runs on a large number of operating systems:
* AIX
* IBM i-5
* BSDi
* FreeBSD
* HP-UX
* Linux
* Mac OS X
* NetWare
* NetBSD
* OpenBSD
* OS/2 Warp
* SGI IRIX
* Solaris
* SCO OpenServer
* SCO UnixWare
* Tru64 Unix
* Windows


MySQL and MariaDB following the acquisition of MySQL by Sun Microsystems and announcements of the acquisition of Sun Microsystems by Oracle Corporation, Michael Widenius, founder of MySQL, leaves this company to launch the MariaDB project, in an effort to replace MySQL while ensuring the interoperability. The name comes from the 2nd daughter of Monty Widenius, Maria (the first name is My).


But before that launched in mysql what is a Database, let's meet this newcomer ...


## What is a database
A database is a "container" storing data such as numbers, dates or words that can be reprocessed by computer means to produce information; for example, numbers and names assembled and sorted to form a directory. Reprocessing is typically a combination of search, selection, sorting, grouping, and concatenation operations.


So the goal of a database is to have a place to store our data, structured so that we can easily retrieve the data. The majority of database systems today allow client / server communication to allow multiple applications to communicate with the client.



The benefits of using a database or database roles:
* Independence: Firstly by using a database for your applications, your data is dissociated from your application. This gives you independence of your data from your application. So you can manipulate your data with other applications without much difficulty because you have a standardized interface to extract the data.
* Access: The database system allows you to manage data access, mainly concurrent access.
* Consistency: Depending on the chosen database system, the system will perform validations to keep your data consistent.
* Security: It is possible to manage the access to the users to allow them only the modification of certain table, or to allow the reading only.
* Administration: The backup system, see replication can be set up no matter the applications

# Topology
There are several database topologies:
* Relational: Nowadays this topology is the most widespread, when you say database generally people this represents a relational database. According to this model, the data is placed in tables with rows and columns and any data contained in the database can be retrieved using the name of the table, the name of the column and the primary key . The relational model is intended to provide data independence and to provide the means to control consistency and avoid redundancy. It allows to manipulate data as sets by performing set theory operations. The consistency rules that apply to relational databases are the lack of redundancy or null of primary keys, and referential integrity.
* Hierarchical: A hierarchical database is a database whose management system links records in a tree structure where each record has only one owner. It was used in the first mainframe database management systems and was invented by NASA. A good example of Hierarchical database we can think of the LDAP directory.
* Object-oriented and object-relational: Object-oriented DBMSs have been a topic of research since 1980, when the first object-oriented programming languages appeared. They are intended to offer the functionality of DBMS to object-oriented languages and allow persistent storage of objects. Objects are manipulated using the native capabilities of object-oriented languages, and a programming interface makes use of the functionality of the DBMS. It is equipped with the necessary mechanisms to allow the use of the possibilities of encapsulation, inheritance and polymorphism of object oriented programming languages. Object-relational DBMSs offer both the object-oriented DBMS and relational DBMS capabilities. (Database supporting it: Informix, Oracle, ...)
* XML or RDF: A Native XML Database (NXD) is a database that relies on the data model provided by XML. It typically uses XML query languages such as XPath or XQuery. A possible extension is an RDF database, with the SPARQL query language.

## Relational database
As we will see the Mysql system which is a relational database, let's focus on this topology. Let's start by clarifying the structure of the data that is contained in a relational database. I understand that many of you already have a good representation of the system but I want to upgrade everyone.


All data is stored as follows:
* Table: A table represents a structured collection of data, a database is composed of several tables forming the set of data.
* Column or field: The basic element of a table, identified by its name, its type (numeric, date, characters ...) and a maximum length. A field often appears as the title of a column.
* Line or record: Information contained in a row of a table and describing a single article, a single person ...
* Primary Key: Fields that uniquely identify a record. A key can be a single field or several. This is the key to find a customer among others or to extract a product from the database.


But where is the relationship in this structure? If each table is defined independently, we should rather talk about data aggregation and not relationship!


Let's move on to the relational side:
* Primary key: The primary key is used to define a unique record, as mentioned earlier this can be a field or a combination of several fields.
* Foreign key: The foreign key defines the relationship with another table and specifies the primary key to specify a unique record in the other table. There can only be one primary key per table, but there can be multiple foreign keys referring to multiple tables.


When we mentioned the benefit of using a database to maintain consistency of our data this is a good example. Take an example, with the representation of the customer table with the order table.



We see the customer table including the primary key (customer number), first name, last name and email address. We also have the order table, which has as primary key the order number, as foreign key the customer number, the product and the quantity. If we want to add a command in the system if we want to add a command for the customer Jean Dupont then the number 1, but when we enter it we make an error and we write the number 11. The database system will refuse the insertion because the foreign key does not correspond to a valid client. There is therefore a validation by the system ensuring a consistency of data.


We will see more in detail this mechanism during implementation example.


## SQL language
SQL (Structured Query Language) is a standardized computer language used to exploit relational databases. The data manipulation language part of SQL allows you to search, add, modify or delete data in relational databases.


In addition to the data manipulation language, the data definition language part is used to create and modify the organization of the data in the database, the transaction control language part allows you to start and terminate transactions, and the Data control language part allows to allow or prohibit access to certain data to certain people.


Created in 1974, standardized since 1986, the language is recognized by the vast majority of relational database management systems (abbreviated RDBMS) of the market.


It is a declarative language, that is to say that it makes it possible to describe the expected result, without describing how to obtain it. DBMSs are equipped with query optimizers - mechanisms that automatically determine the optimal way to perform operations, including an algorithmic complexity estimate. This is based on statistics collected from the data contained in the database (number of records, number of distinct values ​​in a column, etc.).


The instructions for manipulating the contents of the database begin with the keywords SELECT, UPDATE, INSERT or DELETE which correspond respectively to the operations of search for content, modification, addition and deletion. Various keywords such as FROM, JOIN and GROUP are used to indicate the relational algebra operations to perform in order to obtain the content to be manipulated.


### Sample query:
* Search

        SELECT nom, service FROM   employe WHERE  statut = 'stagiaire' ORDER  BY nom;
* Insertion

        INSERT INTO employe (nom, service , status)     VALUES ('Denis-Jean Noid', 'Developpement', 'Jardinier');
* Delete

        DELETE FROM employe      WHERE status = 'president';


We will have the opportunity to see this language in more detail during the training course. 


## NoSQL database (a wink)
We will not cover this type of database here, however given the popularity of this type of database, I wanted to do at least a wink.


The exact definition of the NoSQL DBMS family remains open to debate. The term is related to both technical characteristics and a historical generation of DBMS that emerged in the late 2000s / early 2010s.2 According to Pramod J. Sadalage and Martin Fowler, the main reason for the emergence and the adoption of NoSQL DBMS would be the development of server clusters and the need to have a database paradigm adapted to this hardware infrastructure model


There are several types of NoSQL database:
* Key / value: This represents the first NoSQL database. Used to store information in the form of a key / value pair where the value can be a string of characters, an integer or a serialized object. A Redis database. This type of database offers very good performance by its simplicity and can even be used to store the user sessions or the cache of your site for example.
* Columns: Looks like relational databases, because the data is saved as a row with columns, but is distinguished by the fact that the number of columns can vary from one row to another. The best known solutions are HBase or Cassandra. We had seen the relational database systems stored the information in a table with a specified number of columns, to add an entry you have to fill in all the columns, unlike the NoSQL system.
* Document: Represents information as an XML or JSON object. The advantage is to be able to simply retrieve structured information in a hierarchical manner. The best known solutions are CouchDB, RavenDB and MongoDB.


The goal of the NoSQL system is to answer the following problematic:
* The majority of NoSQL solutions have no schema (shemaLess) this allows to modify the structure of the data quickly without a reorganization of the whole structure.
* Unlike the traditional relational database, performance evolution is achieved horizontally through the sharing of information across multiple servers. Relational database solutions offer an evolution of vertical performance (increase of memory, CPU, ...) it is also possible to put cluster solutions, but this is more expensive.
* NoSQL solutions are able to handle a high volume of data (hundreds, thousands of terabytes)


Of course NoSQL solutions is not magic, there are also problems:
* There is no standardized query language: each publisher has implemented its own
* The implementation of a highly transactional environment (a strong need for writing) where the sequencing of the scripts is essential, remains complex since the architecture is distributed, complicating the atomicity and consistency of the transactions.
* Writing complex queries is difficult to implement


### A short summary :
In order to obtain better performance, the NoSQL databases have abandoned some features offered by default by relational databases such as transactions or integrity checks.
* Transactions: The reason for deleting transactions is explainable, indeed how often do you make changes to the database without committing them? In order to optimize performance, it was chosen to remove this little used feature.
* Inergetic checks: Once again there is an explanation to all, the responsibility of validations of the data is delegated to the developer. This can be seen as a disadvantage, but let's be realistic in the forms you realize you are already doing this validation! If the data is changed directly, it will take more care, but how often does this happen?!?! Should performance be impacted when using 99% of the time ... It's a choice!
* Introduction - Reference

https://en.wikipedia.org/wiki/NoSQL


