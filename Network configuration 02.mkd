# Multi-card and multi ip system

## Using a system with multiple network cards
We saw in the previous section that the network card is named eth0, as you can imagine if we had 2 network cards we would have eth0 and eth1. The number increments for each new card detected.


eth is for ethernet wired cards, if you have another network card for example wireless type the latter will be named wlan, here I speak of convention because the name is defined by the driver / module of the kernel that is loaded, if you have a proprietary driver it will be possible for the latter to choose another name. You never know with the proprietary code ;-).


Although wireless cards are a bit special, because unlike the physical network card usually administered by the system administrator, for the wireless card we are in the mandatory to allow the user to choose his network and managed the authentication of the latter. For the moment I will focus on wired cards if there is a request I will take the time to cover the wireless card system.


Situation when the system starts and initializes the network cards:
1. the system boot, load grub and load kernel
2. the kernel detects the hardware present and loads the modules accordingly.
3. if there is an intel network card in PCI slot 1, the system loads the module and creates the eth0 interface
4. if there is a broadcom network card in the PCI slot 2, the system loads the module and creates the eth1 interface


So we assign our configuration to the interface for example eth0 == 192.168.1.10 and eth1 == 10.10.10.10, hypothetically we have 2 networks to which our access machine. I'm going to assume that our system is a Debian / Ubuntu machine, so here's the / etc / network / interface configuration file:

### example file / etc / network / interface

```
# Intel Card
auto eth0
iface eth0 inet static
        address 192.168.1.10
        netmask 255.255.255.0
        network 192.168.1.0
        broadcast 192.168.1.255
        gateway 192.168.1.1
 
# Broadcom Card
auto eth1
iface eth1 inet static
        address 10.10.10.10
        netmask 255.255.255.0
        network 10.10.10.0
        broadcast 10.10.10.255
        gateway 10.10.10.1
```

Let's continue the scenario, no luck the motherboard of the system dies, too much thing, short circuit no matter, result we change the motherboard, but fortunately the hard drive is not affected, as Linux detects devices at startup we do NOT need to reinstall the machine. However now the new motherboard has an integrated network card (onboard), result I now have 3 available network cards: integrated card, intel and broadcom, originally this situation caused a problem on the GNU / Linux system The system during startup detects all the network cards result the integrated card becomes eth0, intel eth1, ... The result was that when adding a network card we found ourselves to configure the network of the machine, it is not critical but when the system administrator is not physically on the premises and a tech performs the operation this can be very problematic.

Remember udev ?
Nowadays when a new network card is detected by the system udev will edit the file /etc/udev/rules.d/70-persistent-net.rules. Let's look at an example of its contents:

### /etc/udev/rules.d/70-persistent-net.rules

```
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.

# PCI device 0x8086:/sys/devices/pci0000:00/0000:00:03.0 (e1000)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="08:00:27:e8:c1:19", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"
```

In other words following this operation your network card ALWAYS the same name according to the mac address used, as we can see by the configuration criterion: ATTR {address} == "08: 00: 27: e8: c1 : 19 ".


This also means that if you change your network card in the machine, the new network card will have the name eth1, unless you change the configuration in udev.


It is therefore important when changing the physics of the network card to think about this point otherwise udev will identify the new card with a different name. It is also possible that we want to behave ... the important thing is to know it.


## Network card with multiple ip

What are the motivations for having multiple cards in a system?
* Have a machine in 2 separate networks; In terms of network security this is questionable however it is a reason
* Have a machine / firewall / router that manages the network traffic: We find a little the previous point however this is in a flow management optics, the use of 2 network cards is essential.
* Have multiple ip address in the same networks for a machine: NOT a good reason, and we'll see why.


GNU / Linux allows us to define multiple IP addresses on the same NIC / interface. This ip address is defined on the interface named eth0: 0, eth0: 1, ...


So the first part includes the interface of the primary network card and then we add ip "virtual" on the interface with: 0,: 1, etc. It is also possible to define names such as eth0: wan, eth0: lan ,, although this is possible I have seen it rarely used.


The set of configuration presented beforehand to define a temporary or permanent ip address applies for this additional ip address, here is an example for the definition of an ip address on the interface eth0: 0 under Ubuntu:


### virtual ip example

```
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).
 
# The loopback network interface
auto lo
iface lo inet loopback
 
auto eth0
iface eth0 inet static
        address 192.168.10.119
        netmask 255.255.255.0
        network 192.168.10.0
        broadcast 192.168.10.255
        gateway 192.168.10.254
 
# ip virtuel
auto eth0:0
iface eth0:0 inet static
        address 192.168.10.200
        netmask 255.255.255.0
        network 192.168.10.0
        broadcast 192.168.10.255
```


ATTENTION: if you use this technique kept in memory that although the network packets can enter the system on the 2 IP addresses, when the packets comes out the packets will have as origin the ip defined on the interface eth0!


## Map Aggregation
If you have a server with multiple interfaces you might want to use the 2 by defining them in aggregate, in other words that the 2 interfaces is used for the same network connection, why do this:
* Increase redundancy of network cards, if a card dies the system still works
* Increase the redundancy of the cables, if a cable is disconnected the system switches to the other interface
* Doubling the possible transfer capacity on the interfaces, attention this is possible only by performing a configuration on the switch in addition to the server.


We will see the simplest configuration that is to say, the addition of a failover, if a problem occurs on one interface the OS switches to the other card. We name the bonded interface bond0 for bonding. We will configure 2 interface eth0 and eth1 so that it works in pairs and to create the bond0 interface.


The concept is simple we will define the network configuration for the bond0 interface and indicate the interfaces which are members of it see the configuration for RedHat. We create 3 files:
* /etc/sysconfig/network-scripts/ifcfg-eth0
* /etc/sysconfig/network-scripts/ifcfg-eth1
* /etc/sysconfig/network-scripts/ifcfg-bond0

### /etc/sysconfig/network-scripts/ifcfg-eth0 eth ifcfg-eth1

```
# FILE /etc/sysconfig/network-scripts/ifcfg-eth0:
DEVICE=eth0
BOOTPROTO=none
ONBOOT=yes
MASTER=bond0
SLAVE=yes
USERCTL=no
NM_CONTROLLED=no
 
# FILE /etc/sysconfig/network-scripts/ifcfg-eth1:
DEVICE=eth1
BOOTPROTO=none
ONBOOT=yes
MASTER=bond0
SLAVE=yes
USERCTL=no
NM_CONTROLLED=no
```

### /etc/sysconfig/network-scripts/ifcfg-bond0

```
DEVICE=bond0
IPADDR=192.168.1.10
NETMASK=255.255.255.0
ONBOOT=yes
BOOTPROTO=none
USERCTL=no
NM_CONTROLLED=no
```


More information available for RedHat at URL: https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/s2-networkscripts-interfaces-chan.html


For Ubuntu the concept is similar but we only have one file to modify:

### /etc/network/interface

```
#eth0 is manually configured, and slave to the "bond0" bonded NIC
auto eth0
iface eth0 inet manual
bond-master bond0
bond-primary eth0
 
#eth1 ditto, thus creating a 2-link bond.
auto eth1
iface eth1 inet manual
bond-master bond0
 
# bond0 is the bonding NIC and can be used like any other normal NIC.
# bond0 is configured using static network information.
auto bond0
iface bond0 inet static
address 192.168.1.10
gateway 192.168.1.1
netmask 255.255.255.0
bond-mode active-backup
bond-miimon 100
```


Restart the network service after.


More information available for Ubuntu at the URL: https://help.ubuntu.com/community/UbuntuBonding

